{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","whitelistAddr","owner","id","proposal","status","showStatus","whitelist","winner","winnerId","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","methods","call","Status","parseInt","getWinner","on","location","reload","setState","runExample","showWhitelistAddr","alert","error","checkWhitelist","_voter","result","isRegistered","getWhitelistAddr","events","VoterRegistered","addWhitelist","value","addWhitelistVoters","send","from","changeStatus","newStatus","res","addProposal","message","i","push","description","voting","addVote","searchWinner","this","className","style","display","justifyContent","Card","width","Header","Body","Button","onClick","variant","ListGroup","Item","Table","striped","bordered","hover","map","Form","Group","Control","type","ref","input","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.848de427.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null, whitelistAddr: [],\n    owner: null, id: null, proposal: null };\n  status = null;\n  showStatus = null;\n  whitelist = null;\n  winner = null;\n  winnerId = null;\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      const owner = await instance.methods.owner().call();\n      this.status = await instance.methods.Status().call();\n      this.showStatus = this.showStatus(this.status);\n      var id = await instance.methods.id().call();\n      id = parseInt(id, 10);\n      id -= 1;\n      if (this.status === \"5\") {\n        this.winner = 1;\n        this.winnerId = await instance.methods.getWinner().call();\n        console.log(\"winner id = \" + this.winnerId);\n      }\n      window.ethereum.on('accountsChanged', async () => {\n        console.log(\"account changed\");\n        window.location.reload();\n      });\n      window.ethereum.on('chainChanged', async () => {\n        console.log(\"network changed\");\n        window.location.reload();\n      });\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, owner, id }, this.runExample);\n      this.proposal();\n      this.showWhitelistAddr();\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    console.log(accounts);\n    console.log(contract);\n  };\n  checkWhitelist = async () => {\n    const { accounts, contract } = this.state;\n    const result = await contract.methods._voter(accounts[0]).call();\n\n    this.whitelist = result.isRegistered;\n    if (this.whitelist === false ) {\n      alert(\"U are not whitelist\");\n    } else {\n      alert(\"U are whitelist\");\n    }\n  }\n  showWhitelistAddr = async () => {\n    const { contract } = this.state;\n    let result = await contract.methods.getWhitelistAddr().call();\n\n    this.setState({ whitelistAddr: result });\n    contract.events.VoterRegistered({})\n      .on('data', () => {\n        window.location.reload();\n      })\n      .on('error', console.error);\n  }\n  addWhitelist = async () => {\n    const { accounts, contract, owner } = this.state;\n    const address = this.address.value;\n\n    if (accounts[0] !== owner) {\n      alert(\"U are not the owner\");\n      console.log(\"U are not the owner\");\n    } else {\n      if (address !== '') {\n        await contract.methods.addWhitelistVoters(address).send({from: accounts[0]});\n      } else {\n        alert(\"Pls add an address\");\n        console.log(\"pls add an address\");\n      }\n    }\n  }\n  showStatus = (status) => {\n    switch (status) {\n      case \"0\":\n        status = \"RegisteringVoters\";\n        return status;\n        break;\n      case \"1\":\n        status = \"ProposalsRegistrationStarted\";\n        return status;\n        break;\n      case \"2\":\n        status = \"ProposalsRegistrationEnded\";\n        return status;\n        break;\n      case \"3\":\n        status = \"VotingSessionStarted\";\n        return status;\n        break;\n      case \"4\":\n        status = \"VotingSessionEnded\";\n        return status;\n        break;\n      case \"5\":\n        status = \"VotesTallied\";\n        return status;\n        break;\n      default:\n        status = \"RegisteringVoters\";\n        return status;\n        break;\n    }\n  }\n  changeStatus = async () => {\n    const { accounts, contract, owner } = this.state;\n    var newStatus = parseInt(this.status, 10);\n    newStatus += 1;\n\n    if(accounts[0] === owner) {\n      const res = await contract.methods.changeStatus(newStatus).send({ from: accounts[0] });\n      console.log(res);\n      window.location.reload();\n    } else {\n      alert(\"U are not the owner\");\n    }\n  }\n  addProposal = async () => {\n    const { accounts, contract } = this.state;\n    const message = this.message.value\n\n    if (this.whitelist === false ) {\n      alert(\"U are not whitelist\");\n    } else {\n      const res = await contract.methods.addProposal(message).send({ from: accounts[0] });\n      console.log(res);\n      window.location.reload();\n    }\n  }\n  proposal = async () => {\n    const { contract, id } = this.state;\n    let proposal = [];\n\n    if (this.whitelist === false ) {\n      alert(\"U are not whitelist\");\n    } else {\n      for (var i = 0; i <= id; i++) {\n        let res = await contract.methods.proposal(i).call();\n        proposal.push(i + ') ' + res.description);\n      }\n      this.setState({ proposal });\n    }\n  }\n  voting = async () => {\n    const { contract, accounts } = this.state;\n    let id = parseInt(this.id.value, 10);\n    console.log(\"voting for = \" + id);\n\n    if (this.whitelist === false ) {\n      alert(\"U are not whitelist\");\n    } else {\n      const res = await contract.methods.addVote(id).send({ from: accounts[0] });\n      console.log(res);\n      window.location.reload();\n    }\n  }\n  searchWinner = async () => {\n    const { contract, accounts, owner } = this.state;\n\n    if(accounts[0] === owner) {\n      this.winner = 1;\n      const res = await contract.methods.searchWinner().send({ from: accounts[0] });\n      console.log(res);\n      window.location.reload();\n    } else {\n      alert(\"U are not the owner\");\n    }\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <br></br>\n        <div>\n          <h2 className=\"text-center\">Voting</h2>\n          <hr></hr>\n        </div>\n        <div>\n          <h3 className=\"second-text-center\"> Current status = {this.showStatus} </h3>\n          <hr></hr>\n        </div>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Nouvelle session</strong></Card.Header>\n            <Card.Body>\n              <Button onClick={ this.changeStatus } variant=\"dark\" > Next session </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        {/* <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Est ce que je suis whitelist</strong></Card.Header>\n            <Card.Body>\n              <Button onClick={ this.checkWhitelist } variant=\"dark\" > Check </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br> */}\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Liste des comptes whitelisté</strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.whitelistAddr !== null && \n                        this.state.whitelistAddr.map((a) => <tr><td>{a}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n          {console.log(this.status)}\n        { this.status == 0 ? \n          <div style={{display: 'flex', justifyContent: 'center'}}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Autoriser un nouveau compte</strong></Card.Header>\n              <Card.Body>\n                <Form.Group>\n                  <Form.Control type=\"text\" id=\"address\"\n                  ref={(input) => { this.address = input }}\n                  />\n                </Form.Group>\n                <Button onClick={ this.addWhitelist } variant=\"dark\" > Autoriser </Button>\n              </Card.Body>\n            </Card>\n          </div> : <div></div>\n        }\n        <br></br>\n        { this.status == \"1\" ? \n          <div style={{display: 'flex', justifyContent: 'center'}}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Ajout d'une proposition</strong></Card.Header>\n              <Card.Body>\n                <Form.Group>\n                  <Form.Control type=\"text\" id=\"address\"\n                  ref={(input) => { this.message = input }}\n                  />\n                </Form.Group>\n                <Button onClick={ this.addProposal } variant=\"dark\" > Ajouter </Button>\n              </Card.Body>\n            </Card>\n          </div> : <div></div>\n        }\n        <br></br>\n        { this.status != \"0\" ? \n          <div style={{display: 'flex', justifyContent: 'center'}}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Liste des propositions</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n                      <tbody>\n                        {this.state.proposal !== null && \n                          this.state.proposal.map((a) => <tr><td>{a}</td></tr>)\n                        }\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div> : <div></div>\n        }\n        <br></br>\n        { this.status == \"3\" ? \n          <div style={{display: 'flex', justifyContent: 'center'}}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Voter le numero de la proposition</strong></Card.Header>\n              <Card.Body>\n                <Form.Group>\n                  <Form.Control type=\"text\" id=\"address\"\n                  ref={(input) => { this.id = input }}\n                  />\n                </Form.Group>\n                <Button onClick={ this.voting } variant=\"dark\" > Submit vote </Button>\n              </Card.Body>\n            </Card>\n          </div> : <div></div>\n        }\n        <br></br>\n        { this.status == \"4\" ?\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Comptabilisation des voies</strong></Card.Header>\n              <Card.Body>\n                <Button onClick={ this.searchWinner } variant=\"dark\" > Run </Button>\n              </Card.Body>\n            </Card>\n          </div> : <div></div>\n        }\n        <br></br>\n        { this.status == \"5\" ?\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Propositions gagnante</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n                      <tbody>\n                        {this.winner !== null && \n                          <tr><td>{this.winnerId}</td></tr>\n                        }\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div> : <div></div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}